var m=Object.defineProperty;var L=Object.getOwnPropertyDescriptor;var W=Object.getOwnPropertyNames;var A=Object.prototype.hasOwnProperty;var I=(s,e)=>{for(var t in e)m(s,t,{get:e[t],enumerable:!0})},N=(s,e,t,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let a of W(e))!A.call(s,a)&&a!==t&&m(s,a,{get:()=>e[a],enumerable:!(n=L(e,a))||n.enumerable});return s};var R=s=>N(m({},"__esModule",{value:!0}),s);var _={};I(_,{default:()=>y});module.exports=R(_);var M=require("obsidian");var i=require("obsidian"),l="yearly-calendar-view",u=class extends i.ItemView{constructor(e,t){super(e),this.plugin=t}getViewType(){return l}getDisplayText(){return`Year Calendar - ${this.plugin.settings.year}`}getIcon(){return"calendar-days"}async onOpen(){let e=this.containerEl.children[1];e.empty(),await this.renderCalendar(e)}async onClose(){}async refresh(){this.leaf.updateHeader();let e=this.containerEl.children[1];e.empty(),await this.renderCalendar(e)}async renderCalendar(e){let t=this.plugin.settings.year,n=(0,i.moment)().format("YYYY-MM-DD"),a=this.app.vault.getMarkdownFiles(),w=[];for(let o of a){let r=this.app.metadataCache.getFileCache(o)?.frontmatter;if(r&&r.date){let c=(0,i.moment)(r.date.toString(),"YYYY-MM-DD",!0);c.isValid()&&w.push({date:c.format("YYYY-MM-DD"),name:o.basename,color:r.color})}}let D=e.createEl("table",{cls:"my-calendar-table"}),v=D.createEl("thead").createEl("tr");v.createEl("th",{text:"W"}),"Mon Tue Wed Thu Fri Sat Sun".split(" ").forEach(o=>v.createEl("th",{text:o}));let b=D.createEl("tbody"),P=(0,i.moment)(`${t}-01-01`).startOf("isoWeek"),T=(0,i.moment)(`${t}-12-31`).endOf("isoWeek"),h=P.clone();for(;h.isBefore(T);){let o=b.createEl("tr");o.createEl("td",{cls:"week-number",text:h.isoWeek().toString()});for(let C=0;C<7;C++){let r=h,c=r.format("YYYY-MM-DD"),E=o.createEl("td"),g=["calendar-cell"],k=r.month()%2===1;g.push(k?"odd-month":"even-month"),r.year()!==t&&g.push("other-year"),c===n&&g.push("today"),E.addClass(...g);let S=E.createDiv({cls:"cell-content"}),x=S.createDiv({cls:"top-content"}),O=S.createDiv({cls:"dot-area"});r.year()===t&&x.setText(r.date().toString()),w.filter(p=>p.date===c).forEach(p=>{let V=O.createSpan({cls:"dot",text:"\u25CF"});V.title=p.name,V.style.color=p.color||this.plugin.settings.defaultDotColor}),h.add(1,"day")}}}};var d=require("obsidian"),Y={"Default (Theme-based)":"currentColor",Red:"var(--color-red-tint)",Orange:"var(--color-orange-tint)",Yellow:"var(--color-yellow-tint)",Green:"var(--color-green-tint)",Cyan:"var(--color-cyan-tint)",Blue:"var(--color-blue-tint)",Purple:"var(--color-purple-tint)"},f=class extends d.PluginSettingTab{constructor(e,t){super(e,t),this.plugin=t}display(){let{containerEl:e}=this;e.empty(),e.createEl("h2",{text:"Continuous Calendar Settings"}),new d.Setting(e).setName("Year to Display").setDesc("Which year the calendar should show.").addText(t=>t.setPlaceholder("e.g., 2024").setValue(this.plugin.settings.year.toString()).onChange(async n=>{let a=parseInt(n);isNaN(a)||(this.plugin.settings.year=a,await this.plugin.saveSettings(),this.plugin.refreshCalendarView())})),new d.Setting(e).setName("Default Event Dot Color").setDesc("Fallback color if a note has a date but no `color` frontmatter specified.").addDropdown(t=>{Object.keys(Y).forEach(n=>{let a=Y[n];t.addOption(a,n)}),t.setValue(this.plugin.settings.defaultDotColor),t.onChange(async n=>{this.plugin.settings.defaultDotColor=n,await this.plugin.saveSettings(),this.plugin.refreshCalendarView()})})}};var F={year:new Date().getFullYear(),defaultDotColor:"currentColor"},y=class extends M.Plugin{constructor(){super(...arguments);this.calendarView=null}async onload(){console.log("Loading Continuous Calendar Plugin"),await this.loadSettings(),this.registerView(l,t=>(this.calendarView=new u(t,this),this.calendarView)),this.addRibbonIcon("calendar-days","Open Continuous Calendar",t=>{this.activateView()}),this.addSettingTab(new f(this.app,this))}onunload(){console.log("Unloading Continuous Calendar Plugin"),this.calendarView=null}async loadSettings(){this.settings=Object.assign({},F,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async activateView(){this.app.workspace.getLeavesOfType(l).forEach(t=>{t.detach()}),await this.app.workspace.getRightLeaf(!1)?.setViewState({type:l,active:!0}),this.app.workspace.revealLeaf(this.app.workspace.getLeavesOfType(l)[0])}refreshCalendarView(){this.calendarView&&(this.calendarView.refresh(),console.log("Calendar view refreshed."))}};
