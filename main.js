var y=Object.defineProperty;var P=Object.getOwnPropertyDescriptor;var T=Object.getOwnPropertyNames;var v=Object.prototype.hasOwnProperty;var x=(n,e)=>{for(var t in e)y(n,t,{get:e[t],enumerable:!0})},Y=(n,e,t,s)=>{if(e&&typeof e=="object"||typeof e=="function")for(let a of T(e))!v.call(n,a)&&a!==t&&y(n,a,{get:()=>e[a],enumerable:!(s=P(e,a))||s.enumerable});return n};var k=n=>Y(y({},"__esModule",{value:!0}),n);var L={};x(L,{default:()=>u});module.exports=k(L);var C=require("obsidian");var i=require("obsidian"),r="yearly-calendar-view",g=class extends i.ItemView{constructor(e,t){super(e),this.plugin=t}getViewType(){return r}getDisplayText(){return`Year Calendar - ${this.plugin.settings.year}`}getIcon(){return"calendar-days"}async onOpen(){let e=this.containerEl.children[1];e.empty(),this.renderCalendar(e)}async onClose(){}renderCalendar(e){let t=this.plugin.settings.year,s=(0,i.moment)().format("YYYY-MM-DD"),a=e.createEl("table",{cls:"my-calendar-table"}),m=a.createEl("thead").createEl("tr");m.createEl("th",{text:"W"}),"Mon Tue Wed Thu Fri Sat Sun".split(" ").forEach(c=>m.createEl("th",{text:c}));let E=a.createEl("tbody"),S=(0,i.moment)(`${t}-01-01`).startOf("isoWeek"),D=(0,i.moment)(`${t}-12-31`).endOf("isoWeek"),l=S.clone();for(;l.isBefore(D);){let c=E.createEl("tr");c.createEl("td",{cls:"week-number",text:l.isoWeek().toString()});for(let f=0;f<7;f++){let o=l,w=c.createEl("td"),d=["calendar-cell"],M=o.month()%2===1;d.push(M?"odd-month":"even-month"),o.year()!==t&&d.push("other-year"),o.format("YYYY-MM-DD")===s&&d.push("today"),w.addClass(...d),o.year()===t&&w.setText(o.date().toString()),l.add(1,"day")}}}};var h=require("obsidian"),p=class extends h.PluginSettingTab{constructor(e,t){super(e,t),this.plugin=t}display(){let{containerEl:e}=this;e.empty(),e.createEl("h2",{text:"Continuous Calendar Settings"}),new h.Setting(e).setName("Year to Display").setDesc("Which year the calendar should show.").addText(t=>t.setPlaceholder("e.g., 2024").setValue(this.plugin.settings.year.toString()).onChange(async s=>{let a=parseInt(s);isNaN(a)||(this.plugin.settings.year=a,await this.plugin.saveSettings())}))}};var b={year:new Date().getFullYear()},u=class extends C.Plugin{async onload(){console.log("Loading Continuous Calendar Plugin"),await this.loadSettings(),this.registerView(r,e=>new g(e,this)),this.addRibbonIcon("calendar-days","Open Continuous Calendar",e=>{this.activateView()}),this.addSettingTab(new p(this.app,this))}onunload(){console.log("Unloading Continuous Calendar Plugin")}async loadSettings(){this.settings=Object.assign({},b,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async activateView(){this.app.workspace.getLeavesOfType(r).forEach(e=>{e.detach()}),await this.app.workspace.getRightLeaf(!1)?.setViewState({type:r,active:!0}),this.app.workspace.revealLeaf(this.app.workspace.getLeavesOfType(r)[0])}};
