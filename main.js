var y=Object.defineProperty;var M=Object.getOwnPropertyDescriptor;var P=Object.getOwnPropertyNames;var T=Object.prototype.hasOwnProperty;var v=(n,e)=>{for(var t in e)y(n,t,{get:e[t],enumerable:!0})},x=(n,e,t,s)=>{if(e&&typeof e=="object"||typeof e=="function")for(let a of P(e))!T.call(n,a)&&a!==t&&y(n,a,{get:()=>e[a],enumerable:!(s=M(e,a))||s.enumerable});return n};var Y=n=>x(y({},"__esModule",{value:!0}),n);var L={};v(L,{default:()=>u});module.exports=Y(L);var C=require("obsidian");var i=require("obsidian"),l="yearly-calendar-view",h=class extends i.ItemView{constructor(e,t){super(e),this.plugin=t}getViewType(){return l}getDisplayText(){return`Year Calendar - ${this.plugin.settings.year}`}getIcon(){return"calendar-days"}async onOpen(){let e=this.containerEl.children[1];e.empty(),this.renderCalendar(e)}async onClose(){}async refresh(){this.leaf.updateHeader();let e=this.containerEl.children[1];e.empty(),this.renderCalendar(e)}renderCalendar(e){let t=this.plugin.settings.year,s=(0,i.moment)().format("YYYY-MM-DD"),a=e.createEl("table",{cls:"my-calendar-table"}),f=a.createEl("thead").createEl("tr");f.createEl("th",{text:"W"}),"Mon Tue Wed Thu Fri Sat Sun".split(" ").forEach(c=>f.createEl("th",{text:c}));let E=a.createEl("tbody"),S=(0,i.moment)(`${t}-01-01`).startOf("isoWeek"),V=(0,i.moment)(`${t}-12-31`).endOf("isoWeek"),o=S.clone();for(;o.isBefore(V);){let c=E.createEl("tr");c.createEl("td",{cls:"week-number",text:o.isoWeek().toString()});for(let w=0;w<7;w++){let r=o,m=c.createEl("td"),d=["calendar-cell"],D=r.month()%2===1;d.push(D?"odd-month":"even-month"),r.year()!==t&&d.push("other-year"),r.format("YYYY-MM-DD")===s&&d.push("today"),m.addClass(...d),r.year()===t&&m.setText(r.date().toString()),o.add(1,"day")}}}};var p=require("obsidian"),g=class extends p.PluginSettingTab{constructor(e,t){super(e,t),this.plugin=t}display(){let{containerEl:e}=this;e.empty(),e.createEl("h2",{text:"Continuous Calendar Settings"}),new p.Setting(e).setName("Year to Display").setDesc("Which year the calendar should show.").addText(t=>t.setPlaceholder("e.g., 2024").setValue(this.plugin.settings.year.toString()).onChange(async s=>{let a=parseInt(s);isNaN(a)||(this.plugin.settings.year=a,await this.plugin.saveSettings(),this.plugin.refreshCalendarView())}))}};var k={year:new Date().getFullYear()},u=class extends C.Plugin{constructor(){super(...arguments);this.calendarView=null}async onload(){console.log("Loading Continuous Calendar Plugin"),await this.loadSettings(),this.registerView(l,t=>(this.calendarView=new h(t,this),this.calendarView)),this.addRibbonIcon("calendar-days","Open Continuous Calendar",t=>{this.activateView()}),this.addSettingTab(new g(this.app,this))}onunload(){console.log("Unloading Continuous Calendar Plugin"),this.calendarView=null}async loadSettings(){this.settings=Object.assign({},k,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async activateView(){this.app.workspace.getLeavesOfType(l).forEach(t=>{t.detach()}),await this.app.workspace.getRightLeaf(!1)?.setViewState({type:l,active:!0}),this.app.workspace.revealLeaf(this.app.workspace.getLeavesOfType(CAL-VIEW_TYPE)[0])}refreshCalendarView(){this.calendarView&&(this.calendarView.refresh(),console.log("Calendar view refreshed."))}};
